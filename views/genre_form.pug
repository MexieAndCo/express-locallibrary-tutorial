//- 2021-07-27 10:45
//- genre_form/pug

//- Much of this template will be familiar from our previous tutorials. 
//- First, we extend the layout.pug base template and override the block 
//- named 'content'. We then have a heading with the title we passed in 
//- from the controller (via the render() method).

//- Next, we have the pug code for our HTML form that uses the POST method 
//- to send the data to the server, and because the action is an empty 
//- string, will send the data to the same URL as the page.

//- The form defines a single required field of type "text" called "name". 
//- The default value of the field depends on whether the genre variable 
//- is defined. If called from the GET route it will be empty as this is 
//- a new form. If called from a POST route it will contain the (invalid) 
//- value originally entered by the user.

//- The last part of the page is the error code. This prints a list of 
//- errors, if the error variable has been defined (in other words, this 
//- section will not appear when the template is rendered on the GET route).

//- Note: This is just one way to render the errors. You can also get the 
//- names of the affected fields from the error variable, and use these 
//- to control where the error messages are rendered, whether to apply 
//- custom CSS, etc.

//- Note: Our validation uses trim() to ensure that whitespace is not 
//- accepted as a genre name. We can also validate that the field is 
//- not empty on the client side by adding the value required='true' 
//- to the field definition in the form.
extends layout

block content
  h2 #{title}

  form(method='POST' action='')
    div.form-group
      label(for='name') Genre:
      //- input#name.form-control(type='text', placeholder='Fantasy, Poetry, etc.' name='name' value=(undefined===genre ? '' : genre.name))
      //- The following line tests for an empty genre name on the _client_ side.
      input#name.form-control(type='text', placeholder='Fantasy, Poetry, etc.' name='name' value=(undefined===genre ? '' : genre.name), required='true' )
    button.btn.btn-primary(type='submit') Submit

  if errors
   ul
    for error in errors
     li!= error.msg